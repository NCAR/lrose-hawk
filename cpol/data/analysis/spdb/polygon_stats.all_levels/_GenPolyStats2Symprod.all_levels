/**********************************************************************
 * TDRP params for GenPolyStats2Symprod
 **********************************************************************/

//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

//======================================================================
//
// PROCESS CONTROL.
//
//======================================================================
 
///////////// instance ////////////////////////////////
//
// Process instance.
// Used for procmap registration and auto restarting.
// Type: string
//

instance = "";

///////////// no_threads //////////////////////////////
//
// Option to prevent server from using a thread per client.
// For debugging purposes it it sometimes useful to suppress the use of 
//   threads. Set no_threads to TRUE for this type of debugging.
// Type: boolean
//

no_threads = FALSE;

//======================================================================
//
// Server details for support from ServerMgr.
//
//======================================================================
 
///////////// port ////////////////////////////////////
//
// Port number.
// The server listens on this port for client requests.
// Type: int
//

port = 5484;

///////////// qmax ////////////////////////////////////
//
// Max quiescent period (secs).
// If the server does not receive requests for this time period, it will 
//   die gracefully. If set to -1, the server never exits.
// Type: int
//

qmax = -1;

///////////// max_clients /////////////////////////////
//
// Maximum number of clients.
// This is the maximum number of threads the application will produce to 
//   handle client requests.  If the maximum is reached, new clients will 
//   receive a SERVICE_DENIED error message and will have to request the 
//   data again.  If set to -1, no maximum is enforced.
// Type: int
//

max_clients = 64;

//======================================================================
//
// RENDERING PARAMETERS.
//
//======================================================================
 
///////////// render_polygon //////////////////////////
//
// Flag indicating whether to render the polygon.
// A good way to set things up is to render the polygon using 
//   GenPoly2Symprod and just use this server to render the desired text 
//   fields.
// Type: boolean
//

render_polygon = TRUE;

///////////// polygon_dashed //////////////////////////
//
// Polygon dashed flag.
// If set, the polygon will be rendered using a dashed line rather than 
//   a solid line.
// Type: boolean
//

polygon_dashed = FALSE;

///////////// polygon_color ///////////////////////////
//
// Polygon color.
// Name of color suggested for rendering the polygons.
// Type: string
//

polygon_color = "yellow";

//======================================================================
//
// Line styles.
//
//======================================================================
 
///////////// suggested_line_type /////////////////////
//
// display line type.
// Line type suggested for using on the display.
//
// Type: enum
// Options:
//     LINETYPE_SOLID
//     LINETYPE_DASH
//     LINETYPE_DOT_DASH
//

suggested_line_type = LINETYPE_SOLID;

///////////// suggested_line_width ////////////////////
//
// display line width.
// Line width suggested for using on the display.
// Type: long
//

suggested_line_width = 1;

///////////// suggested_capstyle //////////////////////
//
// display capstyle.
// Capstyle suggested for using on the display.
//
// Type: enum
// Options:
//     CAPSTYLE_BUTT
//     CAPSTYLE_NOT_LAST
//     CAPSTYLE_PROJECTING
//     CAPSTYLE_ROUND
//

suggested_capstyle = CAPSTYLE_BUTT;

///////////// suggested_joinstyle /////////////////////
//
// display joinstyle.
// Joinstyle suggested for using on the display.
//
// Type: enum
// Options:
//     JOINSTYLE_BEVEL
//     JOINSTYLE_MITER
//     JOINSTYLE_ROUND
//

suggested_joinstyle = JOINSTYLE_BEVEL;

//======================================================================
//
// Field values.
//
//======================================================================
 
//======================================================================
//
// Text rendering.
//
//======================================================================
 
///////////// display_field_name //////////////////////
//
// Flag indicating whether to display the field name before the field 
//   value.
// Type: boolean
//

display_field_name = TRUE;

///////////// text_format_string //////////////////////
//
// The printf format string to use when displaying field values.
// Type: string
//

text_format_string = "%.2f";

///////////// display_units ///////////////////////////
//
// Flag indicating whether to display the units after the field values.
// Type: boolean
//

display_units = TRUE;

///////////// text_color //////////////////////////////
//
// Color to use for the text.
// Type: string
//

text_color = "yellow";

///////////// text_background_color ///////////////////
//
// Color to use for the background of the text.
// Set to an empty string to make the background transparent.
// Type: string
//

text_background_color = "";

///////////// font ////////////////////////////////////
//
// Font to use for rendering text.
//
// Type: struct
//   typedef struct {
//      string name;
//      int size;
//   }
//
//

font = { "8x13", 10 };

///////////// display_fields //////////////////////////
//
// Value fields to display with each polygon.
// Type: string
// 1D array - variable length.
//

display_fields = { "data area", "mean ZDR", "mean DBZ_F" };

