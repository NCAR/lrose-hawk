/**********************************************************************
 * TDRP params for AltCpCompute
 **********************************************************************/

//======================================================================
//
// AltCpCompute analyses data from tsarchive time series files using the 
//   cross-polar technique to determine ZDR bias.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "zdr";

///////////// register_with_procmap ///////////////////
//
// Option to register with the process mapper.
// If true, this application will try to register with procmap once per 
//   minute. (If unable to do so, no error occurs.).
// Type: boolean
//

register_with_procmap = FALSE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_mode //////////////////////////////
//
// Input mode - files or time series API.
// If TS_FMQ_INPUT, the application will read the time series from a 
//   file message queue and process the pulses as they come in. If 
//   TS_FILE_INPUT, the application will process all the files specified 
//   on the command line.
//
// Type: enum
// Options:
//     TS_FILE_INPUT
//     TS_FMQ_INPUT
//

input_mode = TS_FILE_INPUT;

///////////// input_fmq_name //////////////////////////
//
// FMQ name. For TS_FMQ_INPUT only.
// Path to FMQ files. There are 2 files, one with a .buf extension and 
//   one with a .stat extention. This path does not include the 
//   extensions.
// Type: string
//

input_fmq_name = "/tmp/fmq/ts";

///////////// nbeams_per_analysis /////////////////////
//
// Number of beams per stats analysis.
// The stats will be computed each time this number of beams is reached. 
//   Set to -1 to analyze all input data.
// Type: int
//

nbeams_per_analysis = -1;

//======================================================================
//
// ELEVATION LAYERS.
//
//======================================================================
 
///////////// n_layers ////////////////////////////////
//
// Number of layers for analysis.
// Type: int
//

n_layers = 100;

///////////// delta_elev //////////////////////////////
//
// Delta elevation of each layer (deg).
// Type: double
//

delta_elev = 1;

///////////// start_elev //////////////////////////////
//
// Start elevation of lowest layer (deg).
// Type: double
//

start_elev = 0.5;

///////////// n_samples ///////////////////////////////
//
// Number of pulse samples in a beam.
// Type: int
//

n_samples = 128;

///////////// invert_hv_flag //////////////////////////
//
// Option to invert H/V flag in pulse data.
// Normally, the HV flag is set to 1 for H, 0 for V. If the flag in the 
//   data has the opposite sense, set this to true.
// Type: boolean
//

invert_hv_flag = FALSE;

//======================================================================
//
// MOMENTS COMPUTATION.
//
//======================================================================
 
///////////// hc_receiver /////////////////////////////
//
// Properties of horiz co-polar receiver.
// bsky_noise_at_ifd: the blue-sky noise measured at the ifd, in dBm. 
//   gain: the gain from the measurement plane to the ifd, in dB.
//
// Type: struct
//   typedef struct {
//      double bsky_noise_at_ifd;
//      double gain;
//      double radar_constant;
//   }
//
//

hc_receiver = {
    bsky_noise_at_ifd = -77.1736,
    gain = 37.1712,
    radar_constant = -68.1627
};

///////////// hx_receiver /////////////////////////////
//
// Properties of horiz cross-polar receiver.
//
// Type: struct
//   typedef struct {
//      double bsky_noise_at_ifd;
//      double gain;
//      double radar_constant;
//   }
//
//

hx_receiver = {
    bsky_noise_at_ifd = -77.8509,
    gain = 37.0979,
    radar_constant = -68.3172
};

///////////// vc_receiver /////////////////////////////
//
// Properties of vertical co-polar receiver.
//
// Type: struct
//   typedef struct {
//      double bsky_noise_at_ifd;
//      double gain;
//      double radar_constant;
//   }
//
//

vc_receiver = {
    bsky_noise_at_ifd = -77.4253,
    gain = 37.4876,
    radar_constant = -68.3172
};

///////////// vx_receiver /////////////////////////////
//
// Properties of vertical cross-polar receiver.
//
// Type: struct
//   typedef struct {
//      double bsky_noise_at_ifd;
//      double gain;
//      double radar_constant;
//   }
//
//

vx_receiver = {
    bsky_noise_at_ifd = -78.1237,
    gain = 37.4225,
    radar_constant = -68.1627
};

///////////// atmos_attenuation ///////////////////////
//
// Atmospheric attenuation (dB/km).
// Reflectivity is corrected for this.
// Type: double
//

atmos_attenuation = 0.012;

///////////// zdr_correction //////////////////////////
//
// Correction applied to ZDR.
// Type: double
//

zdr_correction = 0;

///////////// ldr_correction //////////////////////////
//
// Correction applied to LDR.
// Type: double
//

ldr_correction = 0;

//======================================================================
//
// ANALYSIS DETAILS.
//
//======================================================================
 
///////////// min_snr /////////////////////////////////
//
// Minimum SNR for analysis (dB).
// Gates with SNR below this will be ignored.
// Type: double
//

min_snr = 10;

///////////// max_snr /////////////////////////////////
//
// Maximum SNR for analysis (dB).
// Gates with SNR above this will be ignored.
// Type: double
//

max_snr = 60;

///////////// min_cpa /////////////////////////////////
//
// Minimum CPA.
// Can be used to force clutter into analysis. CPA values between 0.9 
//   and 1.0 indicate clutter.
// Type: double
//

min_cpa = 0.95;

///////////// max_cpa /////////////////////////////////
//
// Maximum CPA.
// Can be used to force clutter into analysis. CPA values between 0.9 
//   and 1.0 indicate clutter.
// Type: double
//

max_cpa = 1;

///////////// min_rhohv ///////////////////////////////
//
// Minimum rhohv value.
// Used to select weather echoes for the analysis.
// Type: double
//

min_rhohv = 0;

///////////// min_range ///////////////////////////////
//
// Minimum range for analysis (km).
// Ranges less than this will be ignored.
// Type: double
//

min_range = 4;

///////////// max_range ///////////////////////////////
//
// Maximum range for analysis (km).
// Ranges greater than this will be ignored.
// Type: double
//

max_range = 100;

///////////// min_valid_ratio /////////////////////////
//
// Minimum valid Vx/Hx ratio.
// Sometimes, odd data leads to bogus ratios. This puts limits on the 
//   ratios to be used in the analysis.
// Type: double
//

min_valid_ratio = 0.1;

///////////// max_valid_ratio /////////////////////////
//
// Maximum valid Vx/Hx ratio.
// Sometimes, odd data leads to bogus ratios. This puts limits on the 
//   ratios to be used in the analysis.
// Type: double
//

max_valid_ratio = 10;

///////////// min_count_per_layer /////////////////////
//
// Minimum number of valid gates in a layer for it to be counted.
// Type: double
//

min_count_per_layer = 200;

//======================================================================
//
// OUTPUT RESULTS.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Dir for output files.
// The results will be written to sub-directories named from the data 
//   time.
// Type: string
//

output_dir = "$(PROJ_DIR)/data/analysis/alt_cp/highangles";

///////////// write_moments_file //////////////////////
//
// Option to write moments file.
// If true, a file will be written with one line for each gate, 
//   containing the moments and ratios.
// Type: boolean
//

write_moments_file = FALSE;

