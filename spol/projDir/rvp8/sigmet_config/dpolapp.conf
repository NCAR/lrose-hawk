# ====================== RDA/IRIS HydroClass configuration file =================
# HydroClass configuration name:
# use a descriptive name max 15 characters, saved in ingest header when IRIS
dpolapp.sConfigurationName = "dpolapp_C-band"

# ================================================================================
# Main algorithm menu. Activate algorithms by selecting (1:yes, 0:no):
# Activate quality actions: 
# melting level ML input source, the ML value; the Zdr offset (reingest, only):
dpolapp.bRunQuality = 1
# Activate the identification algorithms:
# 1: Preclassifier, only (the JPOLE algorithm for meteo vs. bio vs. GC/AP)
# 2: Pre- and meteoclassifiers (the JPOLE and the CSU algorithm, combined)
dpolapp.usClassificationMethods = 2

# ================================================================================
# RDA/IRIS major version 
dpolapp.sVersion = "8.12"
# RDA/IRIS revision 
dpolapp.sRevision = ".1"
# dpolapp running version 
dpolapp.sDpolappRevision = "11"

# ===============================================================================
# Detailed data quality configurations:
# Input source of the melting layer height:
# 1: retrieve the value in this configuration file
# 0: use the value in RAW reingested (reingest), or the value in INU record (rda):
dpolapp.Quality.iAux[0] = 1
# The explicit melting layer height. Signed integer [m]: 
dpolapp.Quality.iAux[1] = 2300
# The ZDR balance offset to be applied [dB] (applicable in reingest, only):
dpolapp.Quality.OtherInputs[0].dParams[0] = 0

# ===============================================================================
# Detailed configuration of the preclassifier.

# Fixed features:
# Preclassifier has 5 input observables: Zh, Zdr, RhoHV, Zh-texture, Phidp-texture.
# There are 3 output classes: ground clutter/anomalous propagation ('GC/AP'), 
# bio scatter ('bio') and hydrometeors ('meteo').
# The rule strength function RS is sum of MBF(i) and the class assignment is max RS.
# In reingest, the Preclassifier output is thresholded if Zh is thresholded.
# In rda, the Preclassifier output is thresholded if any of the inputs is thresholded.
# IF (usClassificationMethods>1, i.e. JPOLE&CSU) the JPOLE 'meteo' bins, only, are used as CSU input.
# 'GC/AP' and 'bio' are grouped into 'NoMet', redirected by MeteoClassifiers.uiNonMeteoID.

# IF (usClassificationMethods=1, i.e. JPOLE alone):'
# .. JPOLE class 'GC/AP' is labelled as 'NoMet', 'bio' as 'Aux2' and 'meteo' as 'Aux3'.
# .. One can group the non-'meteo' IDs into 'uiNonMeteoID' using uiMaxNonMeteo:
# .. 0: no action, 1:'GC/AP'->'uiNonMeteoID' 2:('GC/AP' and 'bio')->'uiNonMeteoID'
dpolapp.Preclassifier.uiMaxNonMeteo = 0
# .. and the 'uiNonMeteoID' group can be redirected into 'uiNonMeteoID':
# .. 0:IRIS/RDA threshold, 1:'NoMet'
dpolapp.Preclassifier.uiNonMeteoID = 0
# Class specific thresholds on rule strengths for a class to be accepted (recommend:0.)
dpolapp.Preclassifier.dMinRS[0] = 0
dpolapp.Preclassifier.dMinRS[1] = 0
dpolapp.Preclassifier.dMinRS[2] = 0

# Preclassifier computes the textures of reflectivity and differential phase.
# Texture-1: 
# Input data: Zh.
# Range interval for averaging [Nr of gates]: 
dpolapp.Preclassifier.OtherInputs[0].iParams[0] = 5
# Texture-2: 
# Data type used as input: Phidp.
# Range interval for averaging [Nr of gates]: 
dpolapp.Preclassifier.OtherInputs[1].iParams[0] = 10

# MBFinputs and their use: 
# Reflectivity in preclassifier: 
# Input data: Zh. 
# MBF(Zh) is computed as JPOLE trapetzoid; an additive factor in rule strength
# MBF: default initialization with parameter settings of Table 1 Ref.1
# Zh MBF trapetzoid for GC/AP. 
dpolapp.Preclassifier.MBFinputs[0].dMBF[0][0] = 15
dpolapp.Preclassifier.MBFinputs[0].dMBF[1][0] = 20
dpolapp.Preclassifier.MBFinputs[0].dMBF[2][0] = 70
dpolapp.Preclassifier.MBFinputs[0].dMBF[3][0] = 80
# Zh MBF trapetzoid for bio scatter.
dpolapp.Preclassifier.MBFinputs[0].dMBF[0][1] = 5
dpolapp.Preclassifier.MBFinputs[0].dMBF[1][1] = 10
dpolapp.Preclassifier.MBFinputs[0].dMBF[2][1] = 20
dpolapp.Preclassifier.MBFinputs[0].dMBF[3][1] = 30
# Zh MBF trapetzoid for meteo scatter.
dpolapp.Preclassifier.MBFinputs[0].dMBF[0][2] = 5
dpolapp.Preclassifier.MBFinputs[0].dMBF[1][2] = 10
dpolapp.Preclassifier.MBFinputs[0].dMBF[2][2] = 65
dpolapp.Preclassifier.MBFinputs[0].dMBF[3][2] = 75
# Differential reflectivity in preclassifier: 
# Input data: Zdr (In reingest: adjusted with Quality offset, internally), and Zh.
# MBF(Zdr;Zh) is computed as JPOLE 2D-trapetzoid; additive in rule strength
# Zdr MBF trapetzoid for GC/AP.
dpolapp.Preclassifier.MBFinputs[1].dMBF[0][0] = -4
dpolapp.Preclassifier.MBFinputs[1].dMBF[1][0] = -2
dpolapp.Preclassifier.MBFinputs[1].dMBF[2][0] = 1
dpolapp.Preclassifier.MBFinputs[1].dMBF[3][0] = 2
# Zdr MBF trapetzoid for bio scatter.
dpolapp.Preclassifier.MBFinputs[1].dMBF[0][1] = 0
dpolapp.Preclassifier.MBFinputs[1].dMBF[1][1] = 2
dpolapp.Preclassifier.MBFinputs[1].dMBF[2][1] = 10
dpolapp.Preclassifier.MBFinputs[1].dMBF[3][1] = 12
# Zdr MBF trapetzoid for meteo scatter.
dpolapp.Preclassifier.MBFinputs[1].dMBF[0][2] = -0.3
dpolapp.Preclassifier.MBFinputs[1].dMBF[1][2] = 0
dpolapp.Preclassifier.MBFinputs[1].dMBF[2][2] = 0
dpolapp.Preclassifier.MBFinputs[1].dMBF[3][2] = 0.3
# A polynomial dependence of the Zdr meteo trapezoid on Zh
# The Zh range in which the polynomial is applied:
dpolapp.Preclassifier.MBFinputs[1].dMBF[4][2] = 0
dpolapp.Preclassifier.MBFinputs[1].dMBF[5][2] = 80
# Dependency on Zh: left tail constant term P0, linear P1, 2nd order P2, and 3rd order P3.
# The left shoulder is the same.
dpolapp.Preclassifier.MBFinputs[1].dP[2][0][0] = -0.5
dpolapp.Preclassifier.MBFinputs[1].dP[2][0][1] = 0.0025
dpolapp.Preclassifier.MBFinputs[1].dP[2][0][2] = 0.00075
dpolapp.Preclassifier.MBFinputs[1].dP[2][0][3] = 0
# The right tail constant term P0, linear P1, 2nd order P2 and 3rd order P3
# The right shoulder is the same.
dpolapp.Preclassifier.MBFinputs[1].dP[2][2][0] = 0.08
dpolapp.Preclassifier.MBFinputs[1].dP[2][2][1] = 0.0364
dpolapp.Preclassifier.MBFinputs[1].dP[2][2][2] = 0.000357
dpolapp.Preclassifier.MBFinputs[1].dP[2][2][3] = 0
# Cross correlation coefficient in preclassifier: 
# Data type used as input: RhoHV.
# MBF(RhoHV) is computed as JPOLE trapetzoid;  an additive factor in rule strength 
# MBF: default initialization with parameter settings of Table 1 Ref.1
# RHOhv MBF trapetzoid for GC/AP. 
dpolapp.Preclassifier.MBFinputs[2].dMBF[0][0] = 0.5
dpolapp.Preclassifier.MBFinputs[2].dMBF[1][0] = 0.6
dpolapp.Preclassifier.MBFinputs[2].dMBF[2][0] = 0.9
dpolapp.Preclassifier.MBFinputs[2].dMBF[3][0] = 0.95
# RHOhv MBF trapetzoid for bio scatter.
dpolapp.Preclassifier.MBFinputs[2].dMBF[0][1] = 0
dpolapp.Preclassifier.MBFinputs[2].dMBF[1][1] = 0
dpolapp.Preclassifier.MBFinputs[2].dMBF[2][1] = 0.8
dpolapp.Preclassifier.MBFinputs[2].dMBF[3][1] = 0.83
# RHOhv MBF trapetzoid for meteo scatter.
dpolapp.Preclassifier.MBFinputs[2].dMBF[0][2] = 0.85
dpolapp.Preclassifier.MBFinputs[2].dMBF[1][2] = 0.97
dpolapp.Preclassifier.MBFinputs[2].dMBF[2][2] = 1
dpolapp.Preclassifier.MBFinputs[2].dMBF[3][2] = 1.01
# Differential phase texture in preclassifier: 
# The input data type is computed internally.
#--- MBF(Texture-1) is computed as JPOLE trapetzoid;  an additive factor in rule strength
# MBF: default initialization with parameter settings of Table 1 Ref.1
# PHIDP texture MBF trapetzoid for GC/AP. 
dpolapp.Preclassifier.MBFinputs[3].dMBF[0][0] = 30
dpolapp.Preclassifier.MBFinputs[3].dMBF[1][0] = 40
dpolapp.Preclassifier.MBFinputs[3].dMBF[2][0] = 10800
dpolapp.Preclassifier.MBFinputs[3].dMBF[3][0] = 10800
# PHIDP texture MBF trapetzoid for bio scatter.
dpolapp.Preclassifier.MBFinputs[3].dMBF[0][1] = 8
dpolapp.Preclassifier.MBFinputs[3].dMBF[1][1] = 10
dpolapp.Preclassifier.MBFinputs[3].dMBF[2][1] = 40
dpolapp.Preclassifier.MBFinputs[3].dMBF[3][1] = 60
# PHIDP texture MBF trapetzoid for meteo scatter.
dpolapp.Preclassifier.MBFinputs[3].dMBF[0][2] = 0
dpolapp.Preclassifier.MBFinputs[3].dMBF[1][2] = 1
dpolapp.Preclassifier.MBFinputs[3].dMBF[2][2] = 15
dpolapp.Preclassifier.MBFinputs[3].dMBF[3][2] = 30
# Reflectivity texture in preclassifier: 
# Data type is computed internally.
# MBF(Texture-2) is computed as JPOLE trapetzoid; an additive factor in the rule strength
# MBF: default initialization with parameter settings of Table 1 Ref.1
# Zh texture MBF trapetzoid for GC/AP. 
dpolapp.Preclassifier.MBFinputs[4].dMBF[0][0] = 2
dpolapp.Preclassifier.MBFinputs[4].dMBF[1][0] = 4
dpolapp.Preclassifier.MBFinputs[4].dMBF[2][0] = 10000
dpolapp.Preclassifier.MBFinputs[4].dMBF[3][0] = 10000
# Zh texture MBF trapetzoid for bio scatter.
dpolapp.Preclassifier.MBFinputs[4].dMBF[0][1] = 1
dpolapp.Preclassifier.MBFinputs[4].dMBF[1][1] = 2
dpolapp.Preclassifier.MBFinputs[4].dMBF[2][1] = 4
dpolapp.Preclassifier.MBFinputs[4].dMBF[3][1] = 7
# Zh texture MBF trapetzoid for meteo scatter.
dpolapp.Preclassifier.MBFinputs[4].dMBF[0][2] = 0
dpolapp.Preclassifier.MBFinputs[4].dMBF[1][2] = 0.5
dpolapp.Preclassifier.MBFinputs[4].dMBF[2][2] = 3
dpolapp.Preclassifier.MBFinputs[4].dMBF[3][2] = 6
# Other flags: none. 

# ====================================================================
# Detailed configuration of the hydrometeor classifier.

# Fixed features:
# Meteoclassifier has 5 inputs (Zh, ML, Zdr, Kdp, RhoHV).
# There are five application classes: RAIN, WET SNOW, SNOW, GRAUPEL/SMALL HAIL, HAIL.
# Meteoclassifier considers hail and rain mixtures, and assings likely mixtures as HAIL.
# Meteoclassifier uses the CSU sum/product hybrid as the rule strength (RS), the class result is MAX(RS).
# RS class weights: Zh:1, ML:1(summer i.e. ML>0)/0.333(winter, ML<0)
#  Zdr: 0.5(ML>0)/0.2333(ML<0), Kdp: 0.25(ML>0)/0.1(ML<0), Rhv 0.25(ML>0)/0.333(ML<0).

# Meteoclassifier will report the classification results using the data type DB_HCLASS(2).

# In reingest, the Meteoclassifier output is thresholded if Zh is thresholded.
# In rda, the Meteoclassifier output is thresholded if any of the inputs is thresholded.

# Meteoclassifier considers the Preclassifier(JPOLE) 'meteo' bins as input, only.
# Meteoclassifier will redirect the 'NoMet' and other unclassified outputs as:
# 0: thresholded or 1: 'NoMet'.
dpolapp.MeteoClassifiers.uiNonMeteoID = 0
# Class specific thresholds on rule strengths
# Recommend 0.0 i.e. all JPOLE 'meteo' bins are assigned to a CSU class
dpolapp.MeteoClassifiers.dMinRS[0] = 0
dpolapp.MeteoClassifiers.dMinRS[1] = 0
dpolapp.MeteoClassifiers.dMinRS[2] = 0
dpolapp.MeteoClassifiers.dMinRS[3] = 0
dpolapp.MeteoClassifiers.dMinRS[4] = 0
dpolapp.MeteoClassifiers.dMinRS[5] = 0

# MBFinputs and their use: 
# Reflectivity in Meteoclassifier: 
# Data type used as input: Zh. 
# MBF(dBZ) is computed as the CSU beta function. 
# MBF: C-band, default settings:
# Zh beta MBF for rain: central value, width, slope 
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[0][0] = 30
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[1][0] = 31
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[2][0] = 40
# Zh beta MBF for wet snow.
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[0][1] = 25
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[1][1] = 21
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[2][1] = 40
# Zh beta MBF for snow.
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[0][2] = 0
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[1][2] = 36
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[2][2] = 40
# Zh beta MBF for graupel/small hail.
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[0][3] = 45
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[1][3] = 11
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[2][3] = 20
# Zh beta MBF for large hail.
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[0][4] = 57.5
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[1][4] = 14
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[2][4] = 20
# Zh beta MBF for rain+hail mixture.
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[0][5] = 60
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[1][5] = 11
dpolapp.MeteoClassifiers.MBFinputs[0].dMBF[2][5] = 20
# Altitude in Meteoclassifier: 
# The IRIS/RDA estimate of the melting level height will be used. 
# MBF(altitude;melting level) is computed as the CSU beta(ML) function.
# MBF: C-band, default settings: 
# Altitude beta MBF for rain: central value, width, slope 
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[0][0] = 0
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[1][0] = -0.2
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[2][0] = 20
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[3][0] = 0
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[4][0] = 0.5
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[5][0] = 5
# Altitude beta MBF for wet snow.
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[0][1] = -0.3
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[1][1] = 0.5
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[2][1] = 5
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[3][1] = 0
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[4][1] = 1
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[5][1] = 5
# Altitude beta MBF for snow.
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[0][2] = 10
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[1][2] = 10.2
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[2][2] = 60
# Altitude beta MBF for graupel/small hail.
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[0][3] = 10
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[1][3] = 12
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[2][3] = 60
# Altitude beta MBF for hail.
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[0][4] = 10
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[1][4] = 15
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[2][4] = 20
# Altitude beta MBF for rain+hail mixture.
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[0][5] = 0
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[1][5] = 0.5
dpolapp.MeteoClassifiers.MBFinputs[1].dMBF[2][5] = 20
# Differential reflectivity in Meteoclassifier: 
# Input data: Zdr (adjusted with Quality offset, internally in reingest), and Zh
# MBF(Zdr) is computed as the CSU 2D-beta function of Zh.
# MBF: C-band, default settings:
# Zdr 2D beta MBF for rain at Zh=<Zh> dB (central value, width, slope): 
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[0][0] = 0.48155
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[1][0] = 0.70578
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[2][0] = 10.958
# Polynomial dependence of rain MBF(Zdr) on Zh-<Zh>
#  The center  <Zh> and the Zh range in which the polynomial is applied:
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[3][0] = 30
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[4][0] = 30
# Polynomial coefficients; the linear, the 2nd, the 3rd, and the 4th order; min/max constraints:
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][0][0] = 0.047498
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][0][1] = 0.0017624
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][0][2] = 6.993E-06
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][0][3] = -4.4975E-07
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][0][4] = 0.1
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][0][5] = 5.5
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][1][0] = 0.025917
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][1][1] = 0.00043621
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][1][2] = -4.8951E-06
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][1][3] = -5.6218E-08
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][1][4] = 0.4
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][1][5] = 8
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][2][0] = 0.22873
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][2][1] = 0.0054945
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][2][2] = -5.8275E-05
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][2][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][2][4] = 8
dpolapp.MeteoClassifiers.MBFinputs[2].dP[0][2][5] = 25
# Zdr 2D beta MBF for wet snow at Zh=<Zh> (central value, width, slope):
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[0][1] = 1.1031
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[1][1] = 1.3594
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[2][1] = 15
# Polynomial dependence of wet snow MBF(Zdr) on Zh-<Zh> 
# The center  <Zh> and the Zh range in which the polynomial is applied:
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[3][1] = 27.5
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[4][1] = 17.5
# Polynomial coefficients; the linear, the 2nd, the 3rd, and the 4th order; min/max constraint:
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][0][0] = 0.004623
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][0][1] = 0.00064286
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][0][2] = 2.2222E-05
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][0][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][0][4] = 1.1
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][0][5] = 2.5
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][1][0] = -0.0091144
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][1][1] = 0.00021429
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][1][2] = 3.8384E-05
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][1][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][1][4] = 1
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][1][5] = 2.5
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][2][0] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][2][1] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][2][2] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][2][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][2][4] = 5
dpolapp.MeteoClassifiers.MBFinputs[2].dP[1][2][5] = 20
# Zdr 2D beta MBF for snow at Zh=17.5 dB (central value, width, slope):
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[0][2] = 0.25
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[1][2] = 0.75
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[2][2] = 8
# Zdr 2D beta MBF for graupel at Zh=<Zh> (central value, width, slope): 
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[0][3] = 0.42969
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[1][3] = 0.92969
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[2][3] = 12.5
# Polynomial dependence of graupel MBF(Zdr) on Zh-<Zh>
# The center  <Zh> and the Zh range in which the polynomial is applied:
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[3][3] = 42.5
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[4][3] = 12.5
# Polynomial coefficients; the linear, the 2nd, the 3rd, and the 4th orde;min/max constraints:
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][0][0] = 0.033714
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][0][1] = 0.00096429
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][0][2] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][0][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][0][4] = 0.155
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][0][5] = 1.5
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][1][0] = 0.033714
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][1][1] = 0.00096429
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][1][2] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][1][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][1][4] = 0.5
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][1][5] = 2
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][2][0] = 0.25714
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][2][1] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][2][2] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][2][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][2][4] = 9
dpolapp.MeteoClassifiers.MBFinputs[2].dP[3][2][5] = 17
# Zdr weight and 2D beta MBF for hail at Zh=<Zh> (central value, width, slope):
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[0][4] = -0.75928
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[1][4] = 1.2778
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[2][4] = 15.859
# Polynomial dependence of hail MBF(Zdr) on Zh-<Zh>
# The center  <Zh> and the Zh range in which the polynomial is applied:
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[3][4] = 57.5
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[4][4] = 12.5
# Polynomial coefficients; the linear, the 2nd, the 3rd, and the 4th order;min/max constraint:
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][0][0] = -0.017336
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][0][1] = 0.0015104
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][0][2] = -8.3333E-05
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][0][3] = 4.1667E-06
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][0][4] = -2
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][0][5] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][1][0] = 0.0057788
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][1][1] = -0.0045313
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][1][2] = 2.7778E-05
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][1][3] = 1.25E-05
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][1][4] = 0.1
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][1][5] = 1.3
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][2][0] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][2][1] = -0.14167
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][2][2] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][2][3] = 0.00066667
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][2][4] = 7
dpolapp.MeteoClassifiers.MBFinputs[2].dP[4][2][5] = 17
# Zdr weight and 2D beta MBF for rain+hail mixture at Zh=<Zh> (central value, width, slope):
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[0][5] = 0.93571
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[1][5] = 2
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[2][5] = 15
# Polynomial dependence of rain+hail mixture MBF(Zdr) on Zh-<Zh> 
# The center  <Zh> and the Zh range in which the polynomial is applied:
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[3][5] = 60
dpolapp.MeteoClassifiers.MBFinputs[2].dMBF[4][5] = 10
# Polynomial coefficients; the linear, the 2nd, the 3rd, and the 4th order; min/max constraint:
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][0][0] = -0.054167
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][0][1] = -0.0057143
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][0][2] = 0.00016667
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][0][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][0][4] = -0.5
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][0][5] = 1.5
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][1][0] = 0.0041667
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][1][1] = -0.02375
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][1][2] = -0.00016667
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][1][3] = 0.00015
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][1][4] = 0.5
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][1][5] = 3
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][2][0] = -5.9212E-17
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][2][1] = 0.016667
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][2][2] = 5.9212E-19
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][2][3] = -0.00066667
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][2][4] = 5
dpolapp.MeteoClassifiers.MBFinputs[2].dP[5][2][5] = 20
# Specific differential phase (P4 parametrization) in Meteoclassifier 
# Input data: Kdp, and Zh.
# MBF(Kdp) is computed as the CSU 2D-beta function of Zh.
# MBF: C-band, default settings:
# Kdp 2D beta MBF for rain at Zh=<Zh> dB (central value, width, slope):
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[0][0] = 0.0079391
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[1][0] = -0.032435
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[2][0] = 11.154
# Polynomial dependence of rain MBF(Kdp) on Zh-<Zh>
# The center  <Zh> and the Zh range in which the polynomial is applied:
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[3][0] = 30
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[4][0] = 35
# Polynomial coefficients; the linear, the 2nd, the 3rd, and the 4th order; min/max constraint:
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][0][0] = -0.0049584
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][0][1] = 0.0020558
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][0][2] = 0.00019114
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][0][3] = 3.9888E-06
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][0][4] = 0.05
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][0][5] = 14
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][1][0] = 0.011085
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][1][1] = 0.0029526
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][1][2] = 0.00010385
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][1][3] = 6.1086E-07
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][1][4] = 0.2
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][1][5] = 8
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][2][0] = 0.22873
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][2][1] = 0.0054945
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][2][2] = -5.8275E-05
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][2][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][2][4] = 9
dpolapp.MeteoClassifiers.MBFinputs[3].dP[0][2][5] = 16
# Kdp 2D beta MBF for wet snow at Zh=25 dB: central value, width, slope.
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[0][1] = 0.25
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[1][1] = 1.2
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[2][1] = 10
# Kdp 2D beta MBF for snow at Zh=17.5 dB (central value, width, slope):
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[0][2] = 0
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[1][2] = 0.25
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[2][2] = 10
# Kdp 2D beta MBF for graupel at Zh=42.5 dB (central value, width, slope): 
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[0][3] = 0.26875
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[1][3] = 0.76875
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[2][3] = 12.5
# Polynomial dependence of graupel MBF(Kdp) on Zh-<Zh>
# The center  <Zh> and the Zh range in which the polynomial is applied:
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[3][3] = 42.5
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[4][3] = 12.5
# Polynomial coefficients; the linear, the 2nd, the 3rd, and the 4th order; min/max constraint:
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][0][0] = 0.068704
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][0][1] = 0.001
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][0][2] = -0.00014815
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][0][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][0][4] = -0.25
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][0][5] = 1.5
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][1][0] = 0.068704
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][1][1] = 0.001
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][1][2] = -0.00014815
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][1][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][1][4] = 0.3
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][1][5] = 2
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][2][0] = 0.25714
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][2][1] = 0
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][2][2] = 0
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][2][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][2][4] = 9
dpolapp.MeteoClassifiers.MBFinputs[3].dP[3][2][5] = 17
# Kdp weight and 2D beta MBF for hail at Zh=57.5 dB (central value, width, slope):
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[0][4] = 0.5
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[1][4] = 1
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[2][4] = 10
# Kdp weight and 2D beta MBF for rain+hail mixture at Zh=60 dB (central value, width, slope):
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[0][5] = 2.3714
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[1][5] = 2.3971
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[2][5] = 15
# Polynomial dependence of rain+hail mixture MBF(Kdp) on Zh-<Zh>
# The center  <Zh> and the Zh range in which the polynomial is applied:
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[3][5] = 60
dpolapp.MeteoClassifiers.MBFinputs[3].dMBF[4][5] = 20
# Polynomial coefficients; the linear, the 2nd, the 3rd, and the 4th order; min/max constraint:
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][0][0] = 0.30833
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][0][1] = 0.0085714
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][0][2] = -0.00033333
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][0][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][0][4] = 0
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][0][5] = 10
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][1][0] = 0.29667
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][1][1] = 0.0088571
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][1][2] = -0.00026667
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][1][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][1][4] = -1
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][1][5] = 10
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][2][0] = -0.16667
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][2][1] = 2.4371E-17
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][2][2] = 0.0066667
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][2][3] = 0
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][2][4] = 8
dpolapp.MeteoClassifiers.MBFinputs[3].dP[5][2][5] = 25
# Cross correlation coefficient in Meteoclassifier: 
#--- Data type used as input: RhoHV.
#--- MBF(Rhohv) is computed as the CSU beta function.
# # MBF:  C-band, default settings:
# RHOHV beta MBF for rain: central value, width, slope 
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[0][0] = 1
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[1][0] = 0.04
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[2][0] = 10
# RHOHV beta MBF for wet snow.
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[0][1] = 0.88
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[1][1] = 0.11
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[2][1] = 20
# RHOHV beta MBF for snow.
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[0][2] = 1
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[1][2] = 0.06
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[2][2] = 10
# RHOHV beta MBF for graupel.
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[0][3] = 0.96
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[1][3] = 0.04
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[2][3] = 10
# RHOHV beta MBF for hail.
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[0][4] = 0.9
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[1][4] = 0.045
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[2][4] = 10
# RHOHV beta MBF for rain+hail mixture.
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[0][5] = 0.8
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[1][5] = 0.13
dpolapp.MeteoClassifiers.MBFinputs[4].dMBF[2][5] = 30
