/**********************************************************************
 * TDRP params for Mdv2NetCDF
 **********************************************************************/

//======================================================================
//
// Mdv2NetCDF creates CF-1.0 compliant NetCDF files from Mdv files or 
//   fields.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed with the appropriate level of 
//   detail.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "Test";

//======================================================================
//
// PROGRAM MODES OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode and in REALTIME_FCST_DATA, the program triggers off 
//   of a latest data info file (REALTIME_FCST_DATA is for data stored in 
//   forecast directory structure while REALTIME is for flat mdv data 
//   dirs). In FILELIST mode the program processed data between start and 
//   end times entered on the command line. In FILELIST mode the file 
//   processes files entered on the command line. In SPEC_FCST_REALTIME, 
//   the program triggers off a specific lead time for data stored in RAL 
//   forecast directory structure.
//
// Type: enum
// Options:
//     TIME_INTERVAL
//     FILELIST
//     REALTIME
//     REALTIME_FCST_DATA
//     SPEC_FCST_REALTIME
//

mode = FILELIST;

///////////// fcast_lead_time /////////////////////////
//
// Forecast lead time information for forecast files to be processed.
// Used only if mode is set to SPEC_FCAST_REALTIME.
//
// Type: struct
//   typedef struct {
//      int lead_time_secs;
//      boolean use_gen_time;
//   }
//
//

fcast_lead_time = { 0, FALSE };

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// mdv_url /////////////////////////////////
//
// Url of mdv dataset.
// Type: string
//

mdv_url = "mdvp:://localhost::$(PROJECT)/mdv";

///////////// max_valid_realtime_age //////////////////
//
// Maximum age(secs) of mdv dataset that will trigger processing.
// Type: int
//

max_valid_realtime_age = 600;

//======================================================================
//
// PROCESSING.
//
//======================================================================
 
///////////// global_attributes ///////////////////////
//
// Global attributes for netCDF file.
// conventions: ignored, set by Ncf2Mdv library.
// institution: used.
// references: used.
// source: ignored - will use MDV master header data_set_source.
// title: ignored - will use MDV master header data_set_name.
// comment: used.
//
// Type: struct
//   typedef struct {
//      string conventions;
//      string institution;
//      string references;
//      string source;
//      string title;
//      string comment;
//   }
//
//

global_attributes = { "", "UCAR", "", "", "", "Created by Mdv2NetCDF" };

///////////// mdv_ncf_fields //////////////////////////
//
// field list.
//
// Type: struct
//   typedef struct {
//      string mdv_field_name;
//      string ncf_field_name;
//      string ncf_standard_name;
//      string ncf_long_name;
//      string ncf_units;
//      boolean do_linear_transform;
//      float linear_multiplier;
//      float linear_const;
//      data_pack_t packed_data_type;
//        Options:
//          DATA_PACK_NONE
//          DATA_PACK_BYTE
//          DATA_PACK_SHORT
//   }
//
// 1D array - variable length.
//

mdv_ncf_fields = {
  { "DBZ", "DBZ", "Reflectivity", "Reflectivity", "dBZ", FALSE, 1, 0, DATA_PACK_SHORT},
  { "VEL", "VEL", "Velocity", "Radial_velocity", "m/s", FALSE, 1, 0, DATA_PACK_SHORT},
  { "WIDTH", "WIDTH", "SpecWidth", "Spectrum_width", "m/s", FALSE, 1, 0, DATA_PACK_SHORT}
};

///////////// compress_data ///////////////////////////
//
// Option to compress field data. Default is true.
// Only applies to NETCDF4 and  NETCDF4_CLASSIC files.
// Type: boolean
//

compress_data = TRUE;

///////////// compression_level ///////////////////////
//
// Compression level from 1 to 9 with 9 being the greatest compression. 
//   Default is 9.
// Only applies to NETCDF4 and  NETCDF4_CLASSIC files.
// Type: int
//

compression_level = 9;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// basename ////////////////////////////////
//
// basename of netCDF file.
// Type: string
//

basename = "ncfdata";

///////////// output_dir //////////////////////////////
//
// Output direcory.
// Location of netCDF output.
// Type: string
//

output_dir = "$(DATA_DIR)/nc/radarPolar/cp2_s/sur";

///////////// use_iso8601_filename_convention /////////
//
// If true the output filename uses the basename, followed by ISO 8601 
//   timestamp convention.
// eg. basename.2008-05-22T14:00:00.nc.
// Type: boolean
//

use_iso8601_filename_convention = FALSE;

///////////// use_output_filename /////////////////////
//
// If true the output_filename is used, otherwise it is created with the 
//   baename and a timestamp.
// User specifies the output file name.
// Type: boolean
//

use_output_filename = FALSE;

///////////// output_filename /////////////////////////
//
// User-specified output filename.
// Type: string
//

output_filename = "outputfile.nc";

///////////// output_file_prefix //////////////////////
//
// User-specified output file prefix, comes before basename.
// Type: string
//

output_file_prefix = "";

///////////// output_file_suffix //////////////////////
//
// User-specified output file suffix, comes before the .nc which gets 
//   automatically tacked on.
// Type: string
//

output_file_suffix = "";

///////////// file_format /////////////////////////////
//
// NetCDF file format.
// netCDF classic format, netCDF 64-bit offset format, netCDF4 using 
//   HDF5 format, netCDF4 using HDF5 format but only netCDF3 calls.
//
// Type: enum
// Options:
//     CLASSIC
//     NC64BIT
//     NETCDF4
//     NETCDF4_CLASSIC
//

file_format = NETCDF4;

///////////// output_latlon_arrays ////////////////////
//
// If true latitude and longitude arrays of each grid point are output.
// The CF convention requires that these arrays are present in the 
//   netCDF file; however, the information is redundant since the lat and 
//   lon arrays could be constructed using the other projection and grid 
//   information required with a gridded data field.
// Type: boolean
//

output_latlon_arrays = FALSE;

///////////// output_mdv_attributes ///////////////////
//
// Option to output non-CF compliant MDV attributes.
// If true, MDV attributes which are not CF compliant will be output. 
//   This will facilitate the translation of the data back into MDV with 
//   the minimal loss of information.
// Type: boolean
//

output_mdv_attributes = FALSE;

///////////// output_mdv_chunks ///////////////////////
//
// Option to output non-CF compliant MDV chunks.
// If true, MDV chunks will be included as byte binary variables.
// Type: boolean
//

output_mdv_chunks = FALSE;

